name: Backend - Build and Deploy to Azure Container Apps

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'
  workflow_dispatch:

env:
  AZURE_CONTAINER_REGISTRY: crbcagentdev
  CONTAINER_APP_NAME: app-bcagent-backend-dev
  RESOURCE_GROUP: rg-BCAgentPrototype-app-dev
  CONTAINER_APPS_ENVIRONMENT: cae-bcagent-dev
  IMAGE_NAME: bcagent-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to Azure Container Registry
        run: |
          az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Check if Container App exists
        id: check_app
        run: |
          if az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} &>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Container App (if not exists)
        if: steps.check_app.outputs.exists == 'false'
        run: |
          # Step 1: Create with a public placeholder image and system-assigned identity
          echo "Creating Container App with placeholder image..."
          az containerapp create \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --environment ${{ env.CONTAINER_APPS_ENVIRONMENT }} \
            --image mcr.microsoft.com/azuredocs/containerapps-helloworld:latest \
            --target-port 80 \
            --ingress external \
            --min-replicas 0 \
            --max-replicas 1 \
            --cpu 0.5 \
            --memory 1.0Gi \
            --system-assigned

          # Get the system-assigned identity principal ID
          PRINCIPAL_ID=$(az containerapp show \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query identity.principalId -o tsv)

          echo "Container App Principal ID: $PRINCIPAL_ID"

          # Assign AcrPull role to the identity
          echo "Assigning AcrPull role..."
          ACR_ID=$(az acr show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --query id -o tsv)
          az role assignment create \
            --assignee $PRINCIPAL_ID \
            --role "AcrPull" \
            --scope $ACR_ID

          # Assign Key Vault Secrets User role
          echo "Assigning Key Vault access..."
          KV_NAME=$(echo "${{ secrets.KEY_VAULT_URI }}" | sed 's|https://||' | sed 's|.vault.azure.net||')
          az keyvault set-policy \
            --name $KV_NAME \
            --object-id $PRINCIPAL_ID \
            --secret-permissions get list

          # Wait for role assignment propagation
          echo "Waiting for permissions to propagate..."
          sleep 30

          # Step 2: Configure ACR registry with managed identity
          az containerapp registry set \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --server ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io \
            --identity system

          # Step 3: Configure secrets from Key Vault
          echo "Configuring secrets from Key Vault..."
          az containerapp secret set \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --secrets \
              sql-connection-string=keyvaultref:${{ secrets.KEY_VAULT_URI }}/secrets/SqlDb-ConnectionString,identityref:system \
              redis-connection-string=keyvaultref:${{ secrets.KEY_VAULT_URI }}/secrets/Redis-ConnectionString,identityref:system \
              anthropic-api-key=keyvaultref:${{ secrets.KEY_VAULT_URI }}/secrets/Claude-ApiKey,identityref:system \
              bc-tenant-id=keyvaultref:${{ secrets.KEY_VAULT_URI }}/secrets/BC-TenantId,identityref:system \
              bc-client-id=keyvaultref:${{ secrets.KEY_VAULT_URI }}/secrets/BC-ClientId,identityref:system \
              bc-client-secret=keyvaultref:${{ secrets.KEY_VAULT_URI }}/secrets/BC-ClientSecret,identityref:system \
              jwt-secret=keyvaultref:${{ secrets.KEY_VAULT_URI }}/secrets/JWT-Secret,identityref:system \
              storage-connection-string=keyvaultref:${{ secrets.KEY_VAULT_URI }}/secrets/Storage-ConnectionString,identityref:system

          # Step 4: Update to the actual backend image with env vars
          echo "Updating to backend image..."
          az containerapp update \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --min-replicas 1 \
            --max-replicas 3 \
            --set-env-vars \
              NODE_ENV=production \
              PORT=3001 \
              DATABASE_CONNECTION_STRING=secretref:sql-connection-string \
              REDIS_CONNECTION_STRING=secretref:redis-connection-string \
              ANTHROPIC_API_KEY=secretref:anthropic-api-key \
              BC_TENANT_ID=secretref:bc-tenant-id \
              BC_CLIENT_ID=secretref:bc-client-id \
              BC_CLIENT_SECRET=secretref:bc-client-secret \
              JWT_SECRET=secretref:jwt-secret \
              STORAGE_CONNECTION_STRING=secretref:storage-connection-string \
              BC_API_URL=https://api.businesscentral.dynamics.com/v2.0 \
              BC_ENVIRONMENT=production \
              MCP_SERVER_URL=https://app-erptools-mcp-dev.purplemushroom-befedc5f.westeurope.azurecontainerapps.io/mcp \
              LOG_LEVEL=info \
              ENABLE_PROMPT_CACHING=true \
              ENABLE_EXTENDED_THINKING=true

          # Update ingress configuration for the backend
          az containerapp ingress update \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --target-port 3001

      - name: Update Container App (if exists)
        if: steps.check_app.outputs.exists == 'true'
        run: |
          az containerapp update \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Get Container App URL
        id: get_url
        run: |
          URL=$(az containerapp show \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn \
            --output tsv)
          echo "url=https://$URL" >> $GITHUB_OUTPUT

      - name: Health Check
        run: |
          sleep 30
          curl -f ${{ steps.get_url.outputs.url }}/health || exit 1

      - name: Deployment Summary
        run: |
          echo "### Deployment Successful! ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Backend URL:** ${{ steps.get_url.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
