name: Frontend - Build and Deploy to Azure Container Apps

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-deploy.yml'
  workflow_dispatch:

env:
  AZURE_CONTAINER_REGISTRY: crbcagentdev
  CONTAINER_APP_NAME: app-bcagent-frontend-dev
  RESOURCE_GROUP: rg-BCAgentPrototype-app-dev
  CONTAINER_APPS_ENVIRONMENT: cae-bcagent-dev
  IMAGE_NAME: bcagent-frontend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get Backend URL
        id: get_backend_url
        run: |
          BACKEND_URL=$(az containerapp show \
            --name app-bcagent-backend-dev \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn \
            --output tsv 2>/dev/null || echo "")

          if [ -z "$BACKEND_URL" ]; then
            echo "Backend app not found, using placeholder"
            echo "api_url=https://backend-placeholder.azurecontainerapps.io" >> $GITHUB_OUTPUT
            echo "ws_url=wss://backend-placeholder.azurecontainerapps.io" >> $GITHUB_OUTPUT
          else
            echo "api_url=https://$BACKEND_URL" >> $GITHUB_OUTPUT
            echo "ws_url=wss://$BACKEND_URL" >> $GITHUB_OUTPUT
          fi

      - name: Log in to Azure Container Registry
        run: |
          az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          build-args: |
            NEXT_PUBLIC_API_URL=${{ steps.get_backend_url.outputs.api_url }}
            NEXT_PUBLIC_WS_URL=${{ steps.get_backend_url.outputs.ws_url }}
            NEXT_PUBLIC_ENV=production
          tags: |
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Check if Container App exists
        id: check_app
        run: |
          if az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} &>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Container App (if not exists)
        if: steps.check_app.outputs.exists == 'false'
        run: |
          az containerapp create \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --environment ${{ env.CONTAINER_APPS_ENVIRONMENT }} \
            --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --target-port 3000 \
            --ingress external \
            --min-replicas 1 \
            --max-replicas 5 \
            --cpu 0.25 \
            --memory 0.5Gi \
            --registry-server ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io \
            --env-vars \
              NEXT_PUBLIC_API_URL=${{ steps.get_backend_url.outputs.api_url }} \
              NEXT_PUBLIC_WS_URL=${{ steps.get_backend_url.outputs.ws_url }} \
              NEXT_PUBLIC_ENV=production

      - name: Update Container App (if exists)
        if: steps.check_app.outputs.exists == 'true'
        run: |
          az containerapp update \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --set-env-vars \
              NEXT_PUBLIC_API_URL=${{ steps.get_backend_url.outputs.api_url }} \
              NEXT_PUBLIC_WS_URL=${{ steps.get_backend_url.outputs.ws_url }} \
              NEXT_PUBLIC_ENV=production

      - name: Get Container App URL
        id: get_url
        run: |
          URL=$(az containerapp show \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn \
            --output tsv)
          echo "url=https://$URL" >> $GITHUB_OUTPUT

      - name: Health Check
        run: |
          sleep 30
          curl -f ${{ steps.get_url.outputs.url }} || exit 1

      - name: Deployment Summary
        run: |
          echo "### Deployment Successful! ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend URL:** ${{ steps.get_url.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Backend URL:** ${{ steps.get_backend_url.outputs.api_url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
